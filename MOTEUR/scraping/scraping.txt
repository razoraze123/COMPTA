Code listing for scraping module

===== MOTEUR/scraping/__init__.py =====


===== MOTEUR/scraping/image_scraper/__init__.py =====

"""Universal image scraper package."""

import logging


def configure_logging(verbose: bool = False) -> None:
    """Configure root logging level and format."""

    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s: %(message)s",
        level=logging.DEBUG if verbose else logging.INFO,
    )


configure_logging(False)

===== MOTEUR/scraping/image_scraper/constants.py =====

USER_AGENT = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/117.0 Safari/537.36"
)
# Default CSS selector to find product images
IMAGES_DEFAULT_SELECTOR = "img"

COMMON_SELECTORS = [
    "div.woocommerce-product-gallery__image img",
    "figure.woocommerce-product-gallery__wrapper img",
    "img.product-single__photo",
    'img[src*="cdn.shopify.com"]',
    "img.wp-post-image",
]

===== MOTEUR/scraping/image_scraper/download.py =====

from __future__ import annotations

import base64
import binascii
import logging
import mimetypes
import os
import re
from pathlib import Path

import requests


class ImageDownloadError(RuntimeError):
    """Raised when a binary or base64 download fails."""

    pass


from .constants import USER_AGENT
from .utils import retry_on_stale

logger = logging.getLogger(__name__)


def download_binary(url: str, path: Path, user_agent: str = USER_AGENT) -> Path:
    """Download binary content from *url* into *path* using *user_agent*."""
    headers = {"User-Agent": user_agent}
    try:
        with requests.get(url, headers=headers, stream=True, timeout=10) as resp:
            resp.raise_for_status()
            final_path = path
            if not path.suffix:
                ctype = resp.headers.get("Content-Type", "").split(";")[0]
                ext = mimetypes.guess_extension(ctype) or ".bin"
                final_path = path.with_suffix(ext)
            with final_path.open("wb") as fh:
                for chunk in resp.iter_content(chunk_size=8192):
                    if chunk:
                        fh.write(chunk)
            return final_path
    except requests.exceptions.RequestException as exc:
        raise ImageDownloadError(f"Failed to download {url}") from exc


def save_base64(encoded: str, path: Path) -> None:
    """Decode base64 *encoded* data and write it to *path*."""
    try:
        data = base64.b64decode(encoded)
    except binascii.Error as exc:
        raise ImageDownloadError("Invalid base64 image data") from exc
    path.write_bytes(data)


def unique_path(folder: Path, filename: str, reserved: set[Path]) -> Path:
    """Return a unique ``Path`` in *folder* for *filename*."""
    base, ext = os.path.splitext(filename)
    candidate = folder / filename
    counter = 1
    while candidate.exists() or candidate in reserved:
        candidate = folder / f"{base}_{counter}{ext}"
        counter += 1
    reserved.add(candidate)
    return candidate


@retry_on_stale()
def handle_image(
    element, folder: Path, index: int, user_agent: str, reserved: set[Path]
) -> tuple[Path | None, str | None]:
    """Return target path and optional URL for *element* image."""
    src = (
        element.get_attribute("src")
        or element.get_attribute("data-src")
        or element.get_attribute("currentSrc")
        or element.get_attribute("srcset")
        or element.get_attribute("data-srcset")
    )
    if not src:
        raise RuntimeError("Aucun attribut src / data-src trouvé pour l'image")

    if " " in src and "," in src:
        candidates = [s.strip().split(" ")[0] for s in src.split(",")]
        src = candidates[-1]

    width = int(element.get_attribute("naturalWidth") or 0)
    height = int(element.get_attribute("naturalHeight") or 0)
    if width and width < 200 or height and height < 200:
        return None, None
    if re.search(r"/(logo|icon|sprite)/", src):
        return None, None

    logger.debug("Téléchargement de l'image : %s", src)

    if src.startswith("data:image"):
        header, encoded = src.split(",", 1)
        ext = header.split("/")[1].split(";")[0]
        filename = f"image_base64_{index}.{ext}"
        target = unique_path(folder, filename, reserved)
        save_base64(encoded, target)
        return target, None

    if src.startswith("//"):
        src = "https:" + src

    raw_filename = os.path.basename(src.split("?")[0])
    filename = re.sub(r"-\d+(?=\.\w+$)", "", raw_filename)
    target = unique_path(folder, filename, reserved)
    return target, src

===== MOTEUR/scraping/image_scraper/driver.py =====

from __future__ import annotations

import shutil

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service


def setup_driver(
    headless: bool = True,
    *,
    window_size: tuple[int, int] | None = (1920, 1080),
    timeout: int | None = None,
    chromedriver_path: str | None = None,
) -> webdriver.Chrome:
    """Return a configured Selenium Chrome driver.

    Parameters
    ----------
    headless:
        Launch Chrome in headless mode.
    window_size:
        Desired window size ``(width, height)`` or ``None`` to keep the
        browser default.
    timeout:
        Page load timeout in seconds, ``None`` to disable.
    chromedriver_path:
        Explicit path to the chromedriver binary. If ``None``, the driver
        must be available in ``PATH``.
    """
    options = Options()
    if headless:
        options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    if window_size is not None:
        width, height = window_size
        options.add_argument(f"--window-size={width},{height}")
    if chromedriver_path:
        service = Service(executable_path=chromedriver_path)
    else:
        if shutil.which("chromedriver") is None:
            raise FileNotFoundError("chromedriver not found in PATH")
        service = Service()
    driver = webdriver.Chrome(service=service, options=options)
    driver.execute_cdp_cmd(
        "Page.addScriptToEvaluateOnNewDocument",
        {
            "source": "Object.defineProperty(navigator,'webdriver',{get:() => undefined});"
        },
    )
    if timeout is not None:
        driver.set_page_load_timeout(timeout)
    return driver

===== MOTEUR/scraping/image_scraper/rename.py =====

from __future__ import annotations

import json
import logging
import random
import re
import unicodedata
from pathlib import Path

from .download import unique_path

ALT_JSON_PATH = Path(__file__).with_name("product_sentences.json")
USE_ALT_JSON = True

logger = logging.getLogger(__name__)

_ALT_SENTENCES_CACHE: dict[Path, dict] = {}


def load_alt_sentences(path: Path = ALT_JSON_PATH) -> dict:
    """Load and cache ALT sentences from *path*."""
    path = Path(path)
    cached = _ALT_SENTENCES_CACHE.get(path)
    if cached is not None:
        return cached
    try:
        with path.open("r", encoding="utf-8") as fh:
            data = json.load(fh)
    except Exception as exc:
        logger.warning("Impossible de charger %s : %s", path, exc)
        data = {}
    _ALT_SENTENCES_CACHE[path] = data
    return data


def clean_filename(text: str) -> str:
    """Return *text* transformed into a safe file name."""
    normalized = unicodedata.normalize("NFD", text)
    ascii_text = normalized.encode("ascii", "ignore").decode("ascii")
    ascii_text = ascii_text.lower()
    ascii_text = re.sub(r"\s+", "_", ascii_text)
    ascii_text = re.sub(r"[^a-z0-9_-]", "", ascii_text)
    return ascii_text


def rename_with_alt(
    path: Path, sentences: dict, warned: set[str], reserved: set[Path]
) -> Path:
    """Rename *path* using ALT sentences if available."""
    product_key = path.parent.name.replace("_", " ")
    phrase_list = sentences.get(product_key)
    if not phrase_list:
        if product_key not in warned:
            logger.warning(
                "Cle '%s' absente de product_sentences.json, pas de renommage",
                product_key,
            )
            warned.add(product_key)
        return path

    alt_phrase = random.choice(phrase_list)
    filename = clean_filename(alt_phrase) + path.suffix
    target = path.parent / filename
    if target != path and target.exists():
        target = unique_path(path.parent, filename, reserved)
    try:
        path.rename(target)
    except OSError as exc:
        logger.warning("Echec du renommage %s -> %s : %s", path, target, exc)
        return path
    return target

===== MOTEUR/scraping/image_scraper/scraper.py =====

#!/usr/bin/env python3
"""Utilities to download product images from a webpage."""

from __future__ import annotations

import logging
import os
import re
import subprocess
import sys
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path
from typing import Callable, Optional

from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from tqdm import tqdm

from . import download as dl_helpers
from . import rename as rename_helpers
from .constants import COMMON_SELECTORS
from .constants import IMAGES_DEFAULT_SELECTOR as DEFAULT_CSS_SELECTOR
from .constants import USER_AGENT
from .driver import setup_driver
from .utils import check_robots, exhaust_carousel

logger = logging.getLogger(__name__)


def _safe_folder(product_name: str, base_dir: Path | str = "images") -> Path:
    """Return a Path where images will be saved."""
    safe_name = re.sub(r"[^\w\-]", "_", product_name)
    folder = Path(base_dir) / safe_name
    folder.mkdir(parents=True, exist_ok=True)
    return folder


def _open_folder(path: Path) -> None:
    """Open *path* in the system file explorer if possible."""
    try:
        if os.name == "nt":
            os.startfile(path)  # type: ignore[attr-defined]
        elif sys.platform == "darwin":
            subprocess.Popen(["open", path])
        else:
            subprocess.Popen(["xdg-open", path])
    except Exception as exc:  # pragma: no cover - platform dependent
        logger.warning("Impossible d'ouvrir le dossier %s : %s", path, exc)


def _find_product_name(driver) -> str:
    """Return the product name found in the page."""
    selectors = [
        (By.CSS_SELECTOR, "meta[property='og:title']", "content"),
        (By.TAG_NAME, "title", None),
        (By.TAG_NAME, "h1", None),
    ]
    for by, value, attr in selectors:
        try:
            elem = driver.find_element(by, value)
            text = elem.get_attribute(attr) if attr else getattr(elem, "text", "")
            if text:
                text = text.strip()
            if text:
                return text
        except Exception:
            continue
    return "produit"


def download_images(
    url: str,
    css_selector: str = DEFAULT_CSS_SELECTOR,
    parent_dir: Path | str = "images",
    progress_callback: Optional[Callable[[int, int], None]] = None,
    user_agent: str = USER_AGENT,
    use_alt_json: bool = rename_helpers.USE_ALT_JSON,
    *,
    alt_json_path: str | Path | None = None,
    max_threads: int = 4,
    carousel_selector: str | None = None,
) -> dict:
    """Download all images from *url* and return folder and first image."""
    reserved_paths: set[Path] = set()

    check_robots(url)

    driver = setup_driver(window_size=(1920, 1080), timeout=None)
    driver.execute_cdp_cmd(
        "Network.setUserAgentOverride",
        {"userAgent": user_agent},
    )

    product_name = ""
    folder = Path()
    first_image: Path | None = None
    downloaded = 0
    skipped = 0

    if use_alt_json and alt_json_path:
        sentences = rename_helpers.load_alt_sentences(Path(alt_json_path))
    else:
        sentences = {}
        use_alt_json = False
    warned_missing: set[str] = set()

    try:
        logger.info("\U0001f30d Chargement de la page...")
        driver.get(url)
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, css_selector))
            )
        except TimeoutException:
            logger.error("Timeout waiting for elements with selector %s", css_selector)
            return {"folder": folder, "first_image": first_image}

        product_name = _find_product_name(driver)
        folder = _safe_folder(product_name, parent_dir)

        if carousel_selector:
            try:
                carousel_root = driver.find_element(By.CSS_SELECTOR, carousel_selector)
                img_elements = exhaust_carousel(carousel_root)
            except Exception as exc:
                logger.warning("Carousel not found %s: %s", carousel_selector, exc)
                img_elements = []
        else:
            img_elements = []

        selectors_to_try = [css_selector] + COMMON_SELECTORS
        chosen_selector = css_selector
        for sel in selectors_to_try:
            if img_elements:
                break
            elems = driver.find_elements(By.CSS_SELECTOR, sel)
            if elems:
                img_elements = elems
                chosen_selector = sel
        css_selector = chosen_selector
        logger.info(
            f"\n\U0001f5bc {len(img_elements)} images trouvées avec le "
            f"sélecteur : {css_selector}\n"
        )

        total = len(img_elements)
        pbar = tqdm(range(total), desc="\U0001f53d Téléchargement des images")
        pbar_update = getattr(pbar, "update", lambda n=1: None)
        pbar_close = getattr(pbar, "close", lambda: None)
        futures: dict = {}
        done_count = 0

        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            for idx, img in enumerate(img_elements, start=1):
                try:
                    path, url_to_download = dl_helpers.handle_image(
                        img, folder, idx, user_agent, reserved_paths
                    )
                    if path is None:
                        skipped += 1
                        pbar_update(1)
                        done_count += 1
                        if progress_callback:
                            progress_callback(done_count, total)
                        continue

                    WebDriverWait(driver, 5).until(
                        lambda d: img.get_attribute("src")
                        or img.get_attribute("data-src")
                        or img.get_attribute("data-srcset")
                    )
                    if url_to_download is None:
                        if use_alt_json:
                            path = rename_helpers.rename_with_alt(
                                path, sentences, warned_missing, reserved_paths
                            )
                        downloaded += 1
                        if first_image is None:
                            first_image = path
                        pbar_update(1)
                        done_count += 1
                        if progress_callback:
                            progress_callback(done_count, total)
                    else:
                        fut = executor.submit(
                            dl_helpers.download_binary,
                            url_to_download,
                            path,
                            user_agent,
                        )
                        futures[fut] = (idx, path)
                except Exception as exc:
                    logger.error("\u274c Erreur pour l'image %s : %s", idx, exc)
            for fut in as_completed(futures):
                idx, orig_path = futures[fut]
                try:
                    path = fut.result()
                    if use_alt_json:
                        path = rename_helpers.rename_with_alt(
                            path, sentences, warned_missing, reserved_paths
                        )
                    downloaded += 1
                    if first_image is None:
                        first_image = path
                except Exception as exc:
                    logger.error("\u274c Erreur pour l'image %s : %s", idx, exc)
                    skipped += 1
                pbar_update(1)
                done_count += 1
                if progress_callback:
                    progress_callback(done_count, total)
        pbar_close()
        if progress_callback and done_count != total:
            progress_callback(total, total)
    finally:
        driver.quit()

    logger.info("\n" + "-" * 50)
    logger.info("\U0001f3af Produit     : %s", product_name)
    logger.info("\U0001f4e6 Dossier     : %s", folder)
    logger.info("\u2705 Téléchargées : %s", downloaded)
    logger.info("\u27a1️ Ignorées     : %s", skipped)
    logger.info("-" * 50)

    return {"folder": folder, "first_image": first_image}

===== MOTEUR/scraping/image_scraper/utils.py =====

from __future__ import annotations

import logging
import time
from functools import wraps
from urllib.parse import urlparse

import requests
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.common.by import By

logger = logging.getLogger(__name__)


def retry_on_stale(max_retry: int = 3, delay: float = 0.4):
    """Retry function if a ``StaleElementReferenceException`` occurs."""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            attempts = 0
            while True:
                try:
                    return func(*args, **kwargs)
                except StaleElementReferenceException:
                    attempts += 1
                    if attempts >= max_retry:
                        raise
                    time.sleep(delay)

        return wrapper

    return decorator


def exhaust_carousel(carousel_root):
    """Return all unique ``<img>`` elements within a carousel."""
    imgs: dict[int, any] = {}
    imgs.update(
        {id(img): img for img in carousel_root.find_elements(By.CSS_SELECTOR, "img")}
    )
    try:
        next_btn = carousel_root.find_element(
            By.CSS_SELECTOR, "[class*='next'], [aria-label*='next']"
        )
    except Exception:
        next_btn = None
    while (
        next_btn
        and next_btn.is_enabled()
        and next_btn.get_attribute("aria-disabled") != "true"
    ):
        next_btn.click()
        time.sleep(0.2)
        for img in carousel_root.find_elements(By.CSS_SELECTOR, "img"):
            imgs.setdefault(id(img), img)
        if (
            not next_btn.is_enabled()
            or next_btn.get_attribute("aria-disabled") == "true"
        ):
            break
    return list(imgs.values())


def check_robots(url: str) -> None:
    """Download and display relevant ``Disallow`` lines from robots.txt."""
    parsed = urlparse(url)
    robots_url = f"{parsed.scheme}://{parsed.netloc}/robots.txt"
    try:
        resp = requests.get(robots_url, timeout=5)
        if resp.status_code == 200:
            lines = [l for l in resp.text.splitlines() if "Disallow" in l]
            if lines:
                logger.info("Robots.txt:\n%s", "\n".join(lines))
    except Exception:
        pass

===== MOTEUR/scraping/profiles/__init__.py =====


===== MOTEUR/scraping/profiles/manager.py =====

from __future__ import annotations

import json
from pathlib import Path
from dataclasses import dataclass
from typing import Dict, Optional

from ..image_scraper.constants import IMAGES_DEFAULT_SELECTOR


@dataclass
class Profile:
    """Simple container for a scraping profile."""

    css_selector: str


class ProfileManager:
    """Manage scraping profiles stored in a JSON file."""

    def __init__(self, path: Path | str | None = None) -> None:
        self.path = (
            Path(path)
            if path is not None
            else Path(__file__).with_name("profiles.json")
        )
        self.profiles: Dict[str, Profile] = {}
        self.load_profiles()

    def load_profiles(self) -> None:
        """Load profiles from the JSON file or create defaults."""
        if self.path.exists():
            try:
                with self.path.open("r", encoding="utf-8") as fh:
                    data = json.load(fh)
                if isinstance(data, dict):
                    self.profiles = {
                        str(k): Profile(str(v)) for k, v in data.items()
                    }
                else:
                    self.profiles = {}
            except Exception:
                self.profiles = {}
        else:
            self.profiles = {"default": Profile(IMAGES_DEFAULT_SELECTOR)}
            self.save_profiles()

    def save_profiles(self) -> None:
        """Write current profiles to the JSON file."""
        with self.path.open("w", encoding="utf-8") as fh:
            json.dump(
                {name: p.css_selector for name, p in self.profiles.items()},
                fh,
                ensure_ascii=False,
                indent=2,
            )

    def get_profile(self, name: str) -> Optional[Profile]:
        """Return the profile for *name* if present."""
        return self.profiles.get(name)

    def add_or_update_profile(self, name: str, css: str) -> None:
        """Add or update *name* with *css* and persist it."""
        self.profiles[name] = Profile(css)
        self.save_profiles()

    def remove_profile(self, name: str) -> None:
        """Delete *name* from profiles if present and persist."""
        if name in self.profiles:
            del self.profiles[name]
            self.save_profiles()

===== MOTEUR/scraping/widgets/__init__.py =====


===== MOTEUR/scraping/widgets/profile_widget.py =====

from __future__ import annotations

from typing import Optional

from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QListWidget,
    QLineEdit,
    QPushButton,
    QMessageBox,
)
from PySide6.QtCore import Signal

from ..profiles.manager import ProfileManager


class ProfileWidget(QWidget):
    """Widget to manage scraping profiles."""

    profile_chosen = Signal(str)

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)
        self.manager = ProfileManager()

        main_layout = QVBoxLayout(self)

        # List of existing profiles
        self.profile_list = QListWidget()
        self.profile_list.addItems(sorted(self.manager.profiles))
        self.profile_list.currentItemChanged.connect(self.profile_selected)
        main_layout.addWidget(self.profile_list)

        # Fields to edit profile
        form_layout = QHBoxLayout()
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("Nom du profil")
        form_layout.addWidget(self.name_edit)

        self.css_edit = QLineEdit()
        self.css_edit.setPlaceholderText("Sélecteur CSS")
        form_layout.addWidget(self.css_edit)

        main_layout.addLayout(form_layout)

        # Buttons
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("Ajouter")
        self.add_btn.clicked.connect(self.add_profile)
        btn_layout.addWidget(self.add_btn)

        self.save_btn = QPushButton("Enregistrer")
        self.save_btn.clicked.connect(self.save_profile)
        btn_layout.addWidget(self.save_btn)

        self.del_btn = QPushButton("Supprimer")
        self.del_btn.clicked.connect(self.delete_profile)
        btn_layout.addWidget(self.del_btn)

        self.use_btn = QPushButton("Utiliser")
        self.use_btn.clicked.connect(self.use_profile)
        btn_layout.addWidget(self.use_btn)

        main_layout.addLayout(btn_layout)

    # ------------------------------------------------------------------
    def profile_selected(self, current, previous) -> None:  # noqa: D401
        if current:
            name = current.text()
            self.name_edit.setText(name)
            profile = self.manager.get_profile(name)
            css = profile.css_selector if profile else ""
            self.css_edit.setText(css)

    def add_profile(self) -> None:
        name = self.name_edit.text().strip()
        if not name:
            QMessageBox.warning(self, "Profil", "Nom manquant")
            return
        css = self.css_edit.text().strip()
        if name in self.manager.profiles:
            QMessageBox.information(self, "Profil", "Ce profil existe déjà")
            return
        self.manager.add_or_update_profile(name, css)
        self.profile_list.addItem(name)
        self.profile_list.setCurrentRow(self.profile_list.count() - 1)

    def save_profile(self) -> None:
        name = self.name_edit.text().strip()
        if not name:
            QMessageBox.warning(self, "Profil", "Nom manquant")
            return
        css = self.css_edit.text().strip()
        self.manager.add_or_update_profile(name, css)
        # Ensure the list has this profile
        for i in range(self.profile_list.count()):
            if self.profile_list.item(i).text() == name:
                break
        else:
            self.profile_list.addItem(name)
        items = [
            self.profile_list.item(i).text()
            for i in range(self.profile_list.count())
        ]
        self.profile_list.setCurrentRow(items.index(name))

    def delete_profile(self) -> None:
        name = self.name_edit.text().strip()
        if not name:
            return
        if name in self.manager.profiles:
            self.manager.remove_profile(name)
        for i in range(self.profile_list.count()):
            if self.profile_list.item(i).text() == name:
                self.profile_list.takeItem(i)
                break
        self.name_edit.clear()
        self.css_edit.clear()
        if self.profile_list.count():
            self.profile_list.setCurrentRow(0)

    def use_profile(self) -> None:
        """Emit the currently selected profile name."""
        name = self.name_edit.text().strip()
        if name:
            self.profile_chosen.emit(name)

===== MOTEUR/scraping/widgets/scraping_widget.py =====

from __future__ import annotations

import logging
from pathlib import Path
from typing import Optional

from PySide6.QtCore import QObject, QThread, QUrl, Signal, Slot
from PySide6.QtGui import QDesktopServices
from PySide6.QtWidgets import (
    QComboBox,
    QFileDialog,
    QHBoxLayout,
    QLineEdit,
    QProgressBar,
    QPushButton,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from ..image_scraper.constants import IMAGES_DEFAULT_SELECTOR
from ..image_scraper.scraper import download_images
from ..profiles.manager import ProfileManager


class LogHandler(logging.Handler, QObject):
    """Forward log records to a Qt signal."""

    log_signal = Signal(str)

    def __init__(self) -> None:
        logging.Handler.__init__(self)
        QObject.__init__(self)

    def emit(self, record: logging.LogRecord) -> None:  # noqa: D401 - override
        self.log_signal.emit(self.format(record))


class ScrapeWorker(QThread):
    """Thread to run the image scraping."""

    progress = Signal(int, int)
    finished = Signal(dict)

    def __init__(
        self, url: str, css: str, folder: str, *, use_alt_json: bool = True
    ) -> None:
        super().__init__()
        self.url = url
        self.css = css or IMAGES_DEFAULT_SELECTOR
        self.folder = folder
        self.use_alt_json = use_alt_json

    def run(self) -> None:  # noqa: D401 - QThread API
        result = download_images(
            self.url,
            css_selector=self.css,
            parent_dir=self.folder,
            progress_callback=lambda c, t: self.progress.emit(c, t),
            use_alt_json=self.use_alt_json,
        )
        self.finished.emit(result)


class ScrapingImagesWidget(QWidget):
    """Widget visuel pour lancer un scraping d'images."""

    def __init__(self, parent: Optional[QWidget] = None) -> None:
        super().__init__(parent)

        self.log_handler = LogHandler()
        self.log_handler.setFormatter(logging.Formatter("%(message)s"))
        root_logger = logging.getLogger()
        root_logger.addHandler(self.log_handler)
        root_logger.setLevel(logging.INFO)

        self.worker: ScrapeWorker | None = None
        self.scrape_folder: Path | None = None
        self.profile_manager = ProfileManager()

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)

        # Input URL ------------------------------------------------------
        self.url_edit = QLineEdit()
        self.url_edit.setPlaceholderText("\ud83d\udcce Lien du site")
        self.url_edit.setStyleSheet("padding: 8px; border-radius: 6px;")
        main_layout.addWidget(self.url_edit)

        # Profile selector and destination folder -----------------------
        fields_layout = QHBoxLayout()
        fields_layout.setSpacing(10)

        self.profile_combo = QComboBox()
        self.profile_combo.addItems(sorted(self.profile_manager.profiles))
        fields_layout.addWidget(self.profile_combo)

        folder_container = QWidget()
        folder_layout = QHBoxLayout(folder_container)
        folder_layout.setContentsMargins(0, 0, 0, 0)
        folder_layout.setSpacing(0)

        self.folder_edit = QLineEdit()
        self.folder_edit.setPlaceholderText("\ud83d\udcc1 Destination images")
        self.folder_edit.setStyleSheet(
            "padding: 8px; border-top-left-radius: 6px;"
            " border-bottom-left-radius: 6px;"
        )
        folder_layout.addWidget(self.folder_edit)

        self.browse_btn = QPushButton("\ud83d\udcc1")
        self.browse_btn.setFixedWidth(30)
        self.browse_btn.clicked.connect(self.select_folder)
        self.browse_btn.setStyleSheet(
            "padding: 6px; border-top-right-radius: 6px;"
            " border-bottom-right-radius: 6px;"
        )
        folder_layout.addWidget(self.browse_btn)

        fields_layout.addWidget(folder_container)
        main_layout.addLayout(fields_layout)

        # Progress bar --------------------------------------------------
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.hide()
        main_layout.addWidget(self.progress_bar)

        # Launch button --------------------------------------------------
        button_layout = QHBoxLayout()
        button_layout.addStretch()

        self.start_btn = QPushButton("\ud83d\ude80 LANCER LE SCRAPING")
        self.start_btn.setStyleSheet(
            """
            QPushButton {
                background-color: #2ecc71;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #27ae60;
            }
            """
        )
        self.start_btn.clicked.connect(self.start_scraping)
        button_layout.addWidget(self.start_btn)
        button_layout.addStretch()

        main_layout.addLayout(button_layout)

        # Console -------------------------------------------------------
        self.console = QTextEdit()
        self.console.setReadOnly(True)
        self.console.setStyleSheet(
            "background-color: #212121; color: #00FF00; border-radius: 6px;"
        )
        self.log_handler.log_signal.connect(self.console.append)
        main_layout.addWidget(self.console)

    # ------------------------------------------------------------------
    def select_folder(self) -> None:
        folder = QFileDialog.getExistingDirectory(self, "Choisir un dossier")
        if folder:
            self.folder_edit.setText(folder)

    @Slot(str)
    def set_selected_profile(self, name: str) -> None:
        """Update the combo box to *name* if present."""
        index = self.profile_combo.findText(name)
        if index >= 0:
            self.profile_combo.setCurrentIndex(index)

    @Slot()
    def start_scraping(self) -> None:
        """Launch the scraping process in a background thread."""
        url = self.url_edit.text().strip()
        if not url:
            self.console.append("⚠️ URL manquante")
            return

        profile_name = self.profile_combo.currentText()
        profile = self.profile_manager.get_profile(profile_name)
        css = profile.css_selector if profile else IMAGES_DEFAULT_SELECTOR
        folder = self.folder_edit.text().strip() or "images"

        self.console.clear()
        self.console.append(f"Profil: {profile_name} - Sélecteur: {css}")
        self.progress_bar.setValue(0)
        self.progress_bar.show()
        self.start_btn.setEnabled(False)

        self.worker = ScrapeWorker(url, css, folder)
        self.worker.progress.connect(self.update_progress)
        self.worker.finished.connect(self.scraping_finished)
        self.worker.start()

    @Slot(int, int)
    def update_progress(self, current: int, total: int) -> None:
        if total:
            pct = int(current / total * 100)
            self.console.append(f"Progression: {pct}%")
            self.progress_bar.setValue(pct)

    @Slot(dict)
    def scraping_finished(self, result: dict) -> None:
        self.scrape_folder = Path(result.get("folder", ""))
        self.console.append("✅ Terminé")
        if self.scrape_folder and self.scrape_folder.exists():
            QDesktopServices.openUrl(QUrl.fromLocalFile(str(self.scrape_folder)))
        self.start_btn.setEnabled(True)
